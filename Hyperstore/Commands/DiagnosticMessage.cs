//	Copyright © 2013 - 2014, Alain Metge. All rights reserved.
//
//		This file is part of Hyperstore (http://www.hyperstore.org)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
 
#region Imports

using System;

#endregion

namespace Hyperstore.Modeling
{
    ///-------------------------------------------------------------------------------------------------
    /// <summary>
    ///  A diagnostic message.
    /// </summary>
    ///-------------------------------------------------------------------------------------------------
    [PublicAPI]
    public class DiagnosticMessage
    {
        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Initializes a new instance of the <see cref="DiagnosticMessage"/> class.
        /// </summary>
        /// <param name="messageType">
        ///  Type of the message.
        /// </param>
        /// <param name="message">
        ///  The message.
        /// </param>
        /// <param name="category">
        ///  The category.
        /// </param>
        /// <param name="modelElement">
        ///  (Optional) The model element.
        /// </param>
        /// <param name="ex">
        ///  (Optional) The ex.
        /// </param>
        /// <param name="propertyName">
        ///  (Optional) The name of the property.
        /// </param>
        ///-------------------------------------------------------------------------------------------------
        public DiagnosticMessage(MessageType messageType, string message, string category, IModelElement modelElement = null, Exception ex = null, string propertyName = null)
        {
            DebugContract.RequiresNotEmpty(message);

            MessageType = messageType;
            Message = message;
            Category = category;
            Element = modelElement;
            Exception = ex;
            PropertyName = propertyName;
        }

        internal DiagnosticMessage(MessageType messageType, string message, string category, bool isConstraintMessage, IModelElement modelElement = null, Exception ex = null, string propertyName = null)
            : this(messageType, message, category, modelElement, ex, propertyName)
        {
            DebugContract.RequiresNotEmpty(message);
            IsConstraintMessage = isConstraintMessage;
        }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Message type.
        /// </summary>
        /// <value>
        ///  The type of the message.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public MessageType MessageType { get; private set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Text of the message.
        /// </summary>
        /// <value>
        ///  The message.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public string Message
        {
            get;
            private set;
        }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Message category like Rules or Validations.
        /// </summary>
        /// <value>
        ///  The category.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public string Category { get; private set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Gets a value indicating whether the message has been generated by a constraint.
        /// </summary>
        /// <value>
        ///  <c>true</c> if [is constraint message]; otherwise, <c>false</c>.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public bool IsConstraintMessage { get; private set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  The exception is any.
        /// </summary>
        /// <value>
        ///  The exception.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public Exception Exception { get; private set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Gets or sets the element.
        /// </summary>
        /// <value>
        ///  The element.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public IModelElement Element { get; private set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Gets or sets the name of the property.
        /// </summary>
        /// <value>
        ///  The name of the property.
        /// </value>
        ///-------------------------------------------------------------------------------------------------
        public string PropertyName { get; private set; }

        ///-------------------------------------------------------------------------------------------------
        /// <summary>
        ///  Returns a string that represents the current object.
        /// </summary>
        /// <returns>
        ///  A string that represents the current object.
        /// </returns>
        ///-------------------------------------------------------------------------------------------------
        public override string ToString()
        {
            return String.Format("[{0}] - {1} {2}", MessageType, Message,
                Exception != null ? String.Format("{0} : {1}", Exception.GetType().Name, Exception.Message) : String.Empty
                );
        }

        public string ToJson()
        {
            var json = Platform.PlatformServices.Current.ObjectSerializer;
            var sb = new System.Text.StringBuilder("{");
            sb.Append("\"message\":\"");
            json.Serialize(this.Message);
            sb.Append("\", \"messageType\":");
            sb.Append((int)this.MessageType);
            if( this.PropertyName != null) {
                sb.Append(",\"propertyName\":\"");
                json.Serialize(this.PropertyName);
                sb.Append("\"");
            }
            if( this.Element != null) {
                sb.Append(",\"id\":\"");
                json.Serialize(this.Element.Id.ToString());
                sb.Append("\"");
            }
            sb.Append("}");
            return sb.ToString();
        }
    }
}